swagger: '2.0'
info:
  version: '2.0'
  title: 'Coffee Counter API'
  description: 'API definitions for https://github.com/ASE2019-red/thingy-api-red'
tags:
- name: coffee
  description: Everything about your coffees
- name: machine
  description: Access to the coffee machines
- name: user
  description: Operations about user



paths:
  /coffee:
    get:
      tags:
      - coffee
      summary: Get all coffees
      operationId: getCoffees
      produces:
      - application/json
      description: Return a list of all coffees
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Coffee'
      security:
        - ApiJwtAuth: []

  /coffee/{coffeeId}:
    get:
      tags:
      - coffee
      summary: Find coffee by ID
      description: Returns a single coffee
      operationId: getCoffee
      produces:
      - application/json
      parameters:
      - name: coffeeId
        in: path
        description: ID of coffee to return
        required: true
        type: string
        format: uuid
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Coffee'
        400:
          description: coffee doesn't exist
      security:
        - ApiJwtAuth: []


  /machine:
    get:
      tags:
      - machine
      summary: Get all machines
      operationId: getMachines
      produces:
      - application/json
      description: Return a list of all machines
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Machine'
      security:
        - ApiJwtAuth: []
    post:
      tags:
      - machine
      summary: Add a new machine
      operationId: createMachine
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Machine object that needs to be added
        required: true
        schema:
          $ref: '#/definitions/Machine'
      responses:
        201:
          description: Successfully saved the machine
          schema:
            $ref: '#/definitions/Machine'
        422:
          description: Failed to save the machine
      security:
        - ApiJwtAuth: []
    put:
      tags:
      - machine
      summary: Update an existing machine
      operationId: updateMachine
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Machine object that needs to be updated
        required: true
        schema:
          $ref: '#/definitions/Machine'
      responses:
        200:
          description: Sucessfully updated machine
          schema:
            $ref: '#/definitions/Machine'
        400:
          description: Invalid ID supplied
        404:
          description: Machine not found
        422:
          description: Failed to update the machine
      security:
        - ApiJwtAuth: []


  /machine/{machineId}:
    get:
      tags:
      - machine
      summary: Returns a single machine
      operationId: getMachine
      produces:
      - application/json
      parameters:
      - name: machineId
        in: path
        description: ID of machine that needs to be fetched
        required: true
        type: string
        format: uuid
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Machine'
        400:
          description: Invalid ID supplied
      security:
        - ApiJwtAuth: []


  /machine/{machineId}/coffee:
    get:
      tags:
      - machine
      summary: Returns all coffees produced by a specific machine in a specific time frame
      operationId: getMachineCoffees
      produces:
      - application/json
      parameters:
      - name: machineId
        in: path
        description: ID of machine that needs to be fetched
        required: true
        type: string
        format: uuid
      - name: after
        in: query
        type: string
        format: date-time
        description: timestamp after which the coffee should have been produced
      - name: before
        in: query
        type: string
        format: date-time
        description: timestamp before which the coffee should have been produced
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Coffee'
        400:
          description: Invalid ID supplied
      security:
        - ApiJwtAuth: []



  /user:
    get:
      tags:
      - user
      summary: Get all users
      operationId: getUsers
      produces:
      - application/json
      description: Return a list of all users
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      security:
        - ApiJwtAuth: []
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: registerUser
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: User object that needs to be created
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        400:
          description: Invalid data supplied
        409:
          description: Email address already taken
  /login:
    post:
      tags:
      - user
      summary: Logs user into the system
      operationId: login
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: User object that wants to login
        required: true
        schema:
          type: object
          properties:
            email:
              type: string
              example: user@example.com
            password:
              type: string
              example: userPassword
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        401:
          description: Invalid data supplied
  /user/{userId}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      produces:
      - application/json
      parameters:
      - name: userId
        in: path
        description: The id that needs to be fetched.
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        400:
          description: User not found
      security:
        - ApiJwtAuth: []
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
      - application/json
      parameters:
      - name: userId
        in: path
        description: The id that needs to be fetched.
        required: true
        type: string
      - in: body
        name: body
        description: Updated user object
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        400:
          description: User not found
      security:
        - ApiJwtAuth: []
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
      - application/json
      parameters:
      - name: userId
        in: path
        description: The id belonging to the user that needs to be deleted.
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        400:
          description: User not found
      security:
        - ApiJwtAuth: []


securityDefinitions:
  ApiJwtAuth:
    type: apiKey
    in: header
    name: Authorization
definitions:
  Coffee:
    type: object
    properties:
      id:
        type: string
        format: uuid
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
      machine:
        $ref: '#/definitions/Machine'
  Machine:
    type: object
    required:
    - name
    - sensorIdentifier
    properties:
      id:
        type: string
        format: uuid
      name:
        type: string
        description: Name of tha machine, in order for the user to be able to identify it.
        example: coffee machine
      sensorIdentifier:
        type: string
        description: Bluetooth id of the sensor
        example: d1:d9:9f:36:cf:93
      active:
        type: boolean
        default: true
        description: If the thingy is moved to another machine, this one has to be deactivated.
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
      coffees:
        type: array
        items:
          $ref: '#/definitions/Coffee'
      maintenanceThreshold:
        type: integer
        description: How many coffees can be produced before the machine requires maintenance. (nullable)
      calibrated:
        type: boolean
        description: Is this machine calibrated. (nullable)
  User:
    type: object
    required:
    - name
    - email
    - hashedPassword
    properties:
      id:
        type: string
        format: uuid
      name:
        type: string
        example: "Test User"
      email:
        type: string
        format: email
        minLength: 5
        maxLength: 100
        example: "user@example.com"
      hashedPassword:
        type: string
        example: "userPassword"
      active:
        type: boolean
        default: true
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time

